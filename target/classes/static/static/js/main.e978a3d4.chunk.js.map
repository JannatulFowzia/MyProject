{"version":3,"sources":["App.js","serviceWorker.js","index.js","sigmatechnology_logo_white_500.svg"],"names":["App","state","isLoading","greeting","sayHello","event","a","preventDefault","fetch","myapi","response","json","body","setState","name","isGreetingVisible","updateName","target","value","this","className","src","logo","alt","onChange","placeholder","onClick","style","visibility","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iTA0GeA,G,iNAhGbC,MAAQ,CAENC,WAAW,EAEXC,SAAU,I,EAMZC,S,uCAAW,WAAOC,GAAP,iBAAAC,EAAA,6DAETD,EAAME,iBAFG,SAIYC,MAAM,eAAiB,EAAKP,MAAMQ,OAJ9C,cAILC,EAJK,gBAMQA,EAASC,OANjB,OAMLC,EANK,OAQT,EAAKC,SAAS,CAAEJ,MAAOG,EAAKE,KAAMZ,WAAW,EAAOa,kBAAmB,KAR9D,2C,wDAcXC,WAAa,SAACX,GAEZA,EAAME,iBAEN,EAAKM,SAAS,CAAEJ,MAAOJ,EAAMY,OAAOC,MAAOhB,WAAW,K,wEAM9C,IAAD,SAEsBiB,KAAKlB,MAF3B,EAECQ,MAIR,OANO,EAEQP,UAMN,aAUP,yBAAKkB,UAAU,OAIb,4BAAQA,UAAU,cAEhB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAIzC,yBAAKH,UAAU,aAEb,2BAAOI,SAAU,SAACnB,GAAD,OAAW,EAAKW,WAAWX,IAAQoB,YAAY,oBAEhE,4BAAQC,QAAS,SAACrB,GAAD,OAAW,EAAKD,SAASC,KAA1C,oBAIA,wBAAIsB,MAAO,CAAEC,WAAYT,KAAKJ,oBAA9B,SAA0DI,KAAKlB,MAAMQ,c,GAxE/DoB,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,6D","file":"static/js/main.e978a3d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport logo from './sigmatechnology_logo_white_500.svg';\n\nimport './App.css';\n\n\n\nclass App extends Component {\n\n  state = {\n\n    isLoading: false,\n\n    greeting: \"\"\n\n  };\n\n\n\n  sayHello = async (event) => {\n\n    event.preventDefault();\n\n    let response = await fetch('/myapi?name=' + this.state.myapi);\n\n    let body = await response.json();\n\n    this.setState({ myapi: body.name, isLoading: false, isGreetingVisible: '' });\n\n  }\n\n\n\n  updateName = (event) => {\n\n    event.preventDefault();\n\n    this.setState({ myapi: event.target.value, isLoading: false });\n\n  }\n\n\n\n  render() {\n\n    const { myapi, isLoading } = this.state;\n\n\n\n    if (isLoading) {\n\n      return \"Loading...\";\n\n    }\n\n\n\n    return (\n\n\n\n      <div className=\"App\">\n\n\n\n        <header className=\"App-header\">\n\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n\n\n          <div className=\"App-intro\">\n\n            <input onChange={(event) => this.updateName(event)} placeholder=\"Enter Your Name\"></input>\n\n            <button onClick={(event) => this.sayHello(event)}>Please Click Me!</button>\n\n\n\n            <h2 style={{ visibility: this.isGreetingVisible }}>Hello {this.state.myapi}</h2>\n\n\n\n\n\n          </div>\n\n\n\n        </header>\n\n\n\n      </div>\n\n\n\n    );\n\n  }\n\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sigmatechnology_logo_white_500.01a556b2.svg\";"],"sourceRoot":""}